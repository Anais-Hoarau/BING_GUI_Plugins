% merge_driver_summary_files.m
%
% Written by Christopher Nowakowski
% v.1 5/20/09
%
% This function merges all of the dXX_trip_summary.txt files found in each 
% DriverXX directory with the TripList.dat file that sits at the top level 
% of the RawData directory.
%
% The dXX_trip_summary.txt files were initially generated using the 
% summarize_driver.m script.  TripList.dat is generated by hand from the 
% TripList (Participants).xlsx file that is stored in the 
% CACC/Data Analysis/Summary of Trips/ directory.  
%
% The output of this function is a text file.
%

function merge_driver_summary_files(output_file_name)

% ------------------------------------------------------------------------------
% Check & Parse Function Input Arguments
% ------------------------------------------------------------------------------
usage_msg = 'Usage: merge_driver_summary_files(output_file_name);';

if (nargin == 0),
    % If no output file name provided, ask user to specify one interactively
    output_file_name = ui_get_save_as_filename();
    if isempty(output_file_name),
        return;
    end;
    
elseif (nargin == 1 && ischar(output_file_name) && ~strcmpi(output_file_name,'?')),
    % Assume valid output_file_name
    
else,
    % Help request or input error
    disp(usage_msg);
    disp('Note: This script saves a merged copy of all dXX_trip_summary.txt files.');
    return;
end;


% ------------------------------------------------------------------------------
% Read In TripList.dat
% ------------------------------------------------------------------------------

% Set Up File Path
file_path = get_path;
rawdatadir = file_path{1};
slash = file_path{2};
disp(' ');
disp(file_path{3});

% Load TripList.dat
triplistfile = [rawdatadir 'TripList.dat'];
if exist(triplistfile,'file') ~= 2,
    error('%s\n%s',['Error: Could not find ' triplistfile],'Operation Aborted.');
end;
triplist = load(triplistfile);
if isempty(triplist),
    error('%s\n%s',['Error: Unable to load ' triplistfile],'Operation Aborted.');
else,
    disp('Loaded TripList.dat ...');
end;


% ------------------------------------------------------------------------------
% Loop Through Each Line of TripList.dat
% ------------------------------------------------------------------------------

% Initialize Driver and Output Matrix
driver = -1;
output = [];
row = 0;

% Trip Loop
for i=1:length(triplist(:,1)),

    % Check for New Driver
    if (triplist(i,1) ~= driver)
        driver = triplist(i,1);
        % Load a new dXX_trip_summary.txt file
        [tripsum message] = load_trip_summary(driver,rawdatadir,slash);
        disp(message);
    end;
        
    % Make sure that there was a dXX_trip_summary.txt file loaded
    if isempty(tripsum),
        continue;
    end;
        
    % Match Current Line in the TripList with a Line in the TripSummary
    vehicle = triplist(i,2);
    month = triplist(i,3);
    day = triplist(i,4);
    year = triplist(i,5);
    tripid = triplist(i,6);
    index = find(tripsum.vehicle == vehicle & tripsum.month == month &...
        tripsum.day == day & tripsum.tripid == tripid);
    
    % Report lack of match to screen
    if isempty(index),
        message = ['Warning: Could not locate a trip_summary.txt entry for Driver '...
            num2str(driver) ' Vehicle ' num2str(vehicle) ' TripID ' num2str(tripid)];
        disp(message);
        continue;
    end;
    
    % Add The TripList.dat Info to the Output Data Line
    row = row + 1;
    output.Driver(row,1) = driver;
    output.Vehicle(row,1) = vehicle;
    output.Month(row,1) = month;
    output.Day(row,1) = day;
    output.Year(row,1) = year;
    output.TripID(row,1) = tripid;
    output.DotW(row,1) = triplist(i,7);
    output.DotS(row,1) = triplist(i,8);
    output.Commute(row,1) = triplist(i,9);
    output.Mode(row,1) = triplist(i,10);
    output.CSC(row,1) = triplist(i,11);
    
    % Add the trip_summary.txt Info to the Output Data Line
    output.clock_start(row,1) = tripsum.clock_start(index);
    output.clock_end(row,1) = tripsum.clock_end(index);
    output.utcp_start(row,1) = tripsum.utcp_start(index);
    output.utcp_end(row,1) = tripsum.utcp_end(index);
    output.trip_time(row,1) = tripsum.trip_time(index);
    output.acc_on_events(row,1) = tripsum.acc_on_events(index);
    output.acc_on_time(row,1) = tripsum.acc_on_time(index);
    output.acc_on_set_speed(row,1) = tripsum.acc_on_set_speed(index);
    output.acc_on_mean_speed(row,1) = tripsum.acc_on_mean_speed(index);
    output.acc_active_events(row,1) = tripsum.acc_active_events(index);
    output.acc_active_time(row,1) = tripsum.acc_active_time(index);
    output.acc_active_set_speed(row,1) = tripsum.acc_active_set_speed(index);
    output.acc_active_mean_speed(row,1) = tripsum.acc_active_mean_speed(index);
    output.gap_6_events(row,1) = tripsum.gap_6_events(index);
    output.gap_6_time(row,1) = tripsum.gap_6_time(index);
    output.gap_6_set_speed(row,1) = tripsum.gap_6_set_speed(index);
    output.gap_6_mean_speed(row,1) = tripsum.gap_6_mean_speed(index);
    output.gap_7_events(row,1) = tripsum.gap_7_events(index);
    output.gap_7_time(row,1) = tripsum.gap_7_time(index);
    output.gap_7_set_speed(row,1) = tripsum.gap_7_set_speed(index);
    output.gap_7_mean_speed(row,1) = tripsum.gap_7_mean_speed(index);
    output.gap_9_events(row,1) = tripsum.gap_9_events(index);
    output.gap_9_time(row,1) = tripsum.gap_9_time(index);
    output.gap_9_set_speed(row,1) = tripsum.gap_9_set_speed(index);
    output.gap_9_mean_speed(row,1) = tripsum.gap_9_mean_speed(index);
    output.gap_11_events(row,1) = tripsum.gap_11_events(index);
    output.gap_11_time(row,1) = tripsum.gap_11_time(index);
    output.gap_11_set_speed(row,1) = tripsum.gap_11_set_speed(index);
    output.gap_11_mean_speed(row,1) = tripsum.gap_11_mean_speed(index);
    output.gap_16_events(row,1) = tripsum.gap_16_events(index);
    output.gap_16_time(row,1) = tripsum.gap_16_time(index);
    output.gap_16_set_speed(row,1) = tripsum.gap_16_set_speed(index);
    output.gap_16_mean_speed(row,1) = tripsum.gap_16_mean_speed(index);
    output.gap_22_events(row,1) = tripsum.gap_22_events(index);
    output.gap_22_time(row,1) = tripsum.gap_22_time(index);
    output.gap_22_set_speed(row,1) = tripsum.gap_22_set_speed(index);
    output.gap_22_mean_speed(row,1) = tripsum.gap_22_mean_speed(index);

end;

% ------------------------------------------------------------------------------
% Reformat Ouput Data Types & Save Output File
% ------------------------------------------------------------------------------
output.Driver = int32(output.Driver);
output.Vehicle = int32(output.Vehicle);
output.Month = int32(output.Month);
output.Day = int32(output.Day);
output.Year = int32(output.Year);
output.TripID = int32(output.TripID);
output.DotW = int32(output.DotW);
output.DotS = int32(output.DotS);
output.Commute = int32(output.Commute);
output.Mode = int32(output.Mode);
output.CSC = int32(output.CSC);

[message] = save_simple_struct(output,output_file_name);
if ~isempty(message),
    disp(message);
end;

end


% ------------------------------------------------------------------------------
% Function to load a dXX_trip_summary.txt file
% ------------------------------------------------------------------------------
function [tripsum message] = load_trip_summary(driver,rawdatadir,slash)

% Set filename to load
filename = [rawdatadir 'Driver' num2str(driver,'%02d') slash...
    'd' num2str(driver,'%02d') '_trip_summary.txt'];

% Check for filename
if exist(filename,'file') ~= 2,
    tripsum = [];
    message = ['Error: ' filename ' does not exist.'];
    return;
else,
    message = ['Processing ' filename];
end;
    
% Set up the format string to read a line of the dXX_trip_summary.txt file
%                Driver Vehicle TripID Day  Month Year
format_string = ['%d'   '%s'    '%d'   '%d' '%d'  '%d'];
for i=7:43,
    format_string = [format_string '%s'];
end;
format_string = [format_string '\n'];

% Read summary file
fid = fopen(filename,'r');
header = fgets(fid);
data = textscan(fid,format_string);

% Reformat the data into a simple structure
tripsum.driver = data{1};

% Convert Vehicle Text to Vehicle Number to Match TripList.dat
vehicle = data{2};
for j=1:length(vehicle);
    if strcmpi(vehicle(j),'Silver'),
        tripsum.vehicle(j,1) = 1;
    elseif strcmpi(vehicle(j),'Copper'),
        tripsum.vehicle(j,1) = 2;
    else,
        tripsum.vehicle(j,1) = 0;
    end;
end;
tripsum.vehicle = int32(tripsum.vehicle);

tripsum.tripid = data{3};
tripsum.day = data{4};
tripsum.month = data{5};

% Convert Year to Match TripList.dat
tripsum.year = data{6};
tripsum.year = tripsum.year - 2000;

tripsum.clock_start = data{7};
tripsum.clock_end = data{8};
tripsum.utcp_start = data{9};
tripsum.utcp_end = data{10};
tripsum.trip_time = data{11};
tripsum.acc_on_events = data{12};
tripsum.acc_on_time = data{13};
tripsum.acc_on_set_speed = data{14};
tripsum.acc_on_mean_speed = data{15};
tripsum.acc_active_events = data{16};
tripsum.acc_active_time = data{17};
tripsum.acc_active_set_speed = data{18};
tripsum.acc_active_mean_speed = data{19};
tripsum.gap_6_events = data{20};
tripsum.gap_6_time = data{21};
tripsum.gap_6_set_speed = data{22};
tripsum.gap_6_mean_speed = data{23};
tripsum.gap_7_events = data{24};
tripsum.gap_7_time = data{25};
tripsum.gap_7_set_speed = data{26};
tripsum.gap_7_mean_speed = data{27};
tripsum.gap_9_events = data{28};
tripsum.gap_9_time = data{29};
tripsum.gap_9_set_speed = data{30};
tripsum.gap_9_mean_speed = data{31};
tripsum.gap_11_events = data{32};
tripsum.gap_11_time = data{33};
tripsum.gap_11_set_speed = data{34};
tripsum.gap_11_mean_speed = data{35};
tripsum.gap_16_events = data{36};
tripsum.gap_16_time = data{37};
tripsum.gap_16_set_speed = data{38};
tripsum.gap_16_mean_speed = data{39};
tripsum.gap_22_events = data{40};
tripsum.gap_22_time = data{41};
tripsum.gap_22_set_speed = data{42};
tripsum.gap_22_mean_speed = data{43};
end