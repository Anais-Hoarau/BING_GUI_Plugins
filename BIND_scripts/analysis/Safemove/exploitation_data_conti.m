%% Chargement du fichier mat de Kvaser
open('D:\SAFEMOVE_DATA\2_pre_manip_sujets\Ref05_130712_09h34\Ref05_safemove_enriched.mat');

%% Copie locale des données de la structure 
% les vecteurs temps
tps_abr = safemove.kvaser.ABR.time_sync.values;
tps_ldw1 = safemove.kvaser.LDW1.time_sync.values;
tps_ldw2 = safemove.kvaser.LDW2.time_sync.values;
tps_ldw3 = safemove.kvaser.LDW3.time_sync.values;
tps_vol = safemove.kvaser.VOL.time_sync.values;
tps_ars1 = safemove.kvaser.ARS1.time_sync.values;
tps_cmm2 = safemove.kvaser.CMM2.time_sync.values;
tps_conti = safemove.conti.data.time_sync.values;
% les vecteurs des variables
laneYawAngle_ldw1 = safemove.kvaser.LDW1.ALDW_LaneYawAngl.values;
lateralDist_ldw1 = safemove.kvaser.LDW1.ALDW_LaneLtrlDist.values;
laneChSt_ldw1 = safemove.kvaser.LDW1.ALDW_LaneChg_Stat.values;
laneDataQual_ldw1 = safemove.kvaser.LDW1.ALDW_LaneDataQual.values;
laneWidth_ldw1 = safemove.kvaser.LDW1.ALDW_LaneWidth.values;

cloto_ldw2 = safemove.kvaser.LDW2.ALDW_LanClothoidPara.values;
horCurv_ldw2 = safemove.kvaser.LDW2.ALDW_LaneHrztCrv.values;
vehPitch_ldw2 = safemove.kvaser.LDW2.ALDW_VehPitchAngl.values;
lanMkRtTyp_ldw2 = safemove.kvaser.LDW2.ALDW_LanMkRitType.values;

distDetect_ldw3 = safemove.kvaser.LDW3.ALDW_LanMk_DtctDist.values;

angleVol_vol = safemove.kvaser.VOL.ANGLE_VOLANT.values;

vRelLon_ars1 = safemove.kvaser.ARS1.Obj_VrelLong.values;

volCond_cmm2 = safemove.kvaser.CMM2.VOLONTE_COND.values;

th_conti = safemove.conti.data.TimeHeadway.values;
dh_conti = safemove.conti.data.DistHeadway.values;
nbCarsWay_conti = safemove.conti.data.CarNbOnMyWay.values;
nbCarsOpp_conti = safemove.conti.data.CarNbReverse.values;
tlcR_conti = safemove.conti.data.TLC_Right.values;
tlcL_conti = safemove.conti.data.TLC_Left.values;
timeObLt_conti = safemove.conti.data.TimeObstLefTurn.values;
carspeed_conti = safemove.conti.data.CarSpeed.values;


%% Sub-sampling

a = safemove.kvaser;
longABR = length(a.ABR.time_sync.values);

b = safemove.conti.data;

% Calcul du ratio de prop. des différentes trames CAN
ratioLDW3 = length(a.LDW3.time_sync.values) / longABR;
ratioSLA = length(a.SLA.time_sync.values) / longABR;
ratioACCEL = length(a.ACCEL.time_sync.values) / longABR;
ratioARS1 = length(a.ARS1.time_sync.values) / longABR;
ratioLDW1 = length(a.LDW1.time_sync.values) / longABR;
ratioLDW2 = length(a.LDW2.time_sync.values) / longABR;
ratioLDW3 = length(a.LDW3.time_sync.values) / longABR;
ratioVOL = length(a.VOL.time_sync.values) / longABR;


%% Calculs d'indicateurs
ttc = dh_conti ./ vRelLon_ars1(1:ratioARS1:end);
ttc(ttc<0) = nan;






% %% Essais de calcul d'indicateurs
% 
% %tlc de base (distance latérale, vitesse latérale)
% % centrale inertielle IG500N
% tps_ig500 = safemove.mopad.CentraleInertielle_IGN500.time_sync.values;
% lateralVelocity = safemove.mopad.CentraleInertielle_IGN500.Vy_IGN.values;
% 
% % offset de la position laterale mesurée (elle l'est au centre du véhicule)
% largeur307 = 1.746 ; %en m
% lateralDist_roueG = lateralDist_ldw1 + (largeur307 / 2)*cos(laneYawAngle_ldw1); 
% lateralDist_roueD = lateralDist_ldw1 - (largeur307 / 2)*cos(laneYawAngle_ldw1); 
% 
% %conversion en distance au bord de voie
% distBordG = lateralDist_roueG - 1.75;
% distBordD = lateralDist_roueD + 1.75;
% 
% % bidouillage pour remettre en face les vecteurs de données
% lateralVelocity_strip = lateralVelocity(1429:2:end); 
% lateralVelocity_strip2 =  lateralVelocity_strip(1:end-(length(lateralVelocity_strip) - length(tps_ldw1)));
% 
% % essai d'un tlc
% tlc_basic (lateralDist_ldw1 < 0) = lateralDist_roueG(lateralDist_ldw1 > 0) ./ lateralVelocity_strip2(lateralDist_ldw1 > 0);
% tlc_basic (lateralDist_ldw1 > 0) = lateralDist_roueD(lateralDist_ldw1 < 0) ./ lateralVelocity_strip2(lateralDist_ldw1 < 0);
% tlc_basic (lateralDist_ldw1 == 0) = 0;
% 
% 
% %% Essais de tracés
% 
% % position latérale des roues
% figure,
% plot(lateralDist_ldw1,tps_ldw1,'b');
% hold on
% plot(lateralDist_roueD	,tps_ldw1, 'r');
% plot(lateralDist_roueG,tps_ldw1, 'm');
% hold off
% 

% Position sur la voie en vue de dessus
figure,
% seuil de filtrage qualité de tracking
seuil = .7;
y=lateralDist_ldw1(laneDataQual_ldw1>seuil);
y(:,1) = -1.75;
y(:,2) = 0;
y(:,3) = 1.75;
plot(y, tps_ldw1(laneDataQual_ldw1>seuil));
hold on,
plot(-lateralDist_ldw1(laneDataQual_ldw1>seuil), tps_ldw1(laneDataQual_ldw1>seuil), 'g')
grid minor


% Angle volant et Courbure horizontale
hold on;
subplot(2,1,1); scatter(tps_ldw2,horCurv_ldw2);
title('horCurv')
subplot(2,1,2); scatter(tps_vol,angleVol_vol);





% %% ESSAIS pour impact formule de subsampling
% 
% % Un paramètre subsamplé tracé pour deux méthodes de subsampling
% A=numel(tps_abr);
% B=numel(tps_cmm2);
% 
% tps1 = tps_cmm2(1:B/A:end);
% val1 = volCond_cmm2(1:B/A:end);
% 
% tps2 = tps_cmm2(floor(linspace(1,B,A)));
% val2 = volCond_cmm2(floor(linspace(1,B,A)));
% 
% figure,
% hold on
% plot(tps1,val1,'--rs','LineWidth',2,...
%                 'MarkerEdgeColor','k',...
%                 'MarkerFaceColor','r',...
%                 'MarkerSize',10)
% plot(tps2,val2,'--bs','LineWidth',2,...
%                 'MarkerEdgeColor','k',...
%                 'MarkerFaceColor','b',...
%                 'MarkerSize',10)
%                         
% % comparaison au signal original
figure, 
hold on
plot(tps1(10000:11000),val1(10000:11000),'--rs','LineWidth',2,...
                'MarkerEdgeColor','k',...
                'MarkerFaceColor','r',...
                'MarkerSize',4);xlim([488 494]);ylim([0 35]);
figure,
plot(tps2(10000:11000),val2(10000:11000),'--bs','LineWidth',2,...
                'MarkerEdgeColor','k',...
                'MarkerFaceColor','b',...
                'MarkerSize',4);xlim([488 494]);ylim([0 35]);
figure,
plot(tps_cmm2,volCond_cmm2,'--ms','LineWidth',2,...
                'MarkerEdgeColor','k',...
                'MarkerFaceColor','m',...
                'MarkerSize',4);xlim([488 494]);ylim([0 35])

