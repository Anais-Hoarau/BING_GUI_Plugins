function [e, mi] = segmente (x, option, N)		%SEGMENTE	Segmente les positions de séries temporelles en demi cycles	% 	[E, M] = SEGMENTE (X), donne 	%		E: indices of extrema in X %		M: indices of middle-crossing in X %	[E, M] = segmente (x, 'do_not_recenter')	%	[E, M] = segmente (x, '', N)	%		N points area at the beg/end of x, where no E or M can be found %		(e.g., usefull if starting effects in filtering)% 	Method: 	%	#NOM?	%	- zero crossings are found = position middle-crossing ≈ peak velocity	%	- between two zero-crossings, (last) extrema is found	% 	NB: a maximum of 1 half cycle is lost, at the beg & end of X			%	Version 1.0 * D. Mottet  * 07/01/99	%	Version 1.1 * D. Mottet  * 26/02/99 	%		Ajout du retour de mi%		choix du DERNIER extrema (si immobile)%	Version 1.2 * D. Mottet  * 18/06/99 	%		ajout de l'option de recentrage%		suppresion des vrais zeros dans la recherche des milieux%		ajout de 1 & end-1 à mi pour trouver TOUS les extrema vrais%		retour de [] si absence de valeurs%	Version 1.2.1	%		English translation				if nargin < 2			option = 'no_option';	end		if nargin < 3			N = 0;				end										% recentrage					if strcmp(option, 'do_not_recenter');						%disp('Data not recentered in "Segmente".');				else						x = x - mean (x);				% indispensable à la méthode, sauf si déjà fait avant...end										% recherche des milieux en x					x2 = x(2:end); x1 = x(1:end-1); 	% création de deux séries décalées de 1 ech				mi = find( (x1>=0 & x2<0) | (x1<0 & x2>=0) );					%mi = [1;mi;size(x,1)];				% added b & e before finding extrema						% suppression d'erreurs possibles aux extrémitée					mi = mi(mi <= size(x,1)-N);						mi = mi(mi >= N);												% recherche du premier extrema entre deux passages à zéro						e=[];						for n = 1:size(mi)-1							bg=mi(n);						ed=mi(n+1);						X=x(bg:ed);					% un segment entre deux milieux	X=abs(X);					% 	sn=find(X==max(X));			% indice des extrema sur ce segment		%	e(n)=sn(1)+bg-1;				% on garde le premier extrema		e(n)=sn(end)+bg-1;			% on garde le dernier extrema de la eérie		end						e=e';						%mi = mi(2:end-1);				% suppress added b & e: these are NOT zeros		